import type {
  ArticleFeedItemContent,
  FeedItemContent,
  FeedItemContentType,
  IntervalFeedItemContent,
  TweetFeedItemContent,
  VideoFeedItemContent,
  WebsiteFeedItemContent,
  XkcdFeedItemContent,
  YouTubeFeedItemContent,
} from '@shared/types/feedItemContent.types';
import type {FeedItemImportState} from '@shared/types/feedItemImportStates';
import type {Feed} from '@shared/types/feeds.types';
import type {AccountId, FeedItemId} from '@shared/types/ids.types';
import type {TagId} from '@shared/types/tags.types';
import type {BaseStoreItem} from '@shared/types/utils.types';

/**
 * The basic unit of content in the app. Generated by a {@link Feed} and can come in many
 * different content types.
 */
interface BaseFeedItem extends BaseStoreItem {
  /** Unique ID for this feed item. */
  readonly feedItemId: FeedItemId;
  /** Origin of the feed item (e.g. RSS feed, YouTube channel, extension, ). */
  readonly origin: Feed;
  /** Type of feed item content (e.g. article, video, website). */
  readonly feedItemContentType: FeedItemContentType;
  /** ID of the account that owns the feed item. */
  readonly accountId: AccountId;
  /** State of the feed item's import process. */
  readonly importState: FeedItemImportState;
  /** Data about the content of the feed item (e.g. title, URL, summary). */
  readonly content: FeedItemContent;
  /**
   * Triage status determines where the feed item "lives" in the app.
   *
   * Unlike tags which represent boolean states, these statuses form an exclusive set.
   */
  readonly triageStatus: TriageStatus;

  /**
   * Feed item state needs to allow for:
   * - quick reads and writes.
   * - indexing of arbitrary boolean states.
   *
   * To accomplish this, most state is stored as tags that either exist in this map or not.
   */
  readonly tagIds: Partial<Record<TagId, true>>;
}

export type ArticleFeedItem = BaseFeedItem & {
  readonly feedItemContentType: FeedItemContentType.Article;
  readonly content: ArticleFeedItemContent;
};

export type VideoFeedItem = BaseFeedItem & {
  readonly feedItemContentType: FeedItemContentType.Video;
  readonly content: VideoFeedItemContent;
};

export type WebsiteFeedItem = BaseFeedItem & {
  readonly feedItemContentType: FeedItemContentType.Website;
  readonly content: WebsiteFeedItemContent;
};

export type TweetFeedItem = BaseFeedItem & {
  readonly feedItemContentType: FeedItemContentType.Tweet;
  readonly content: TweetFeedItemContent;
};

export type YouTubeFeedItem = BaseFeedItem & {
  readonly feedItemContentType: FeedItemContentType.YouTube;
  readonly content: YouTubeFeedItemContent;
};

export type XkcdFeedItem = BaseFeedItem & {
  readonly feedItemContentType: FeedItemContentType.Xkcd;
  readonly content: XkcdFeedItemContent;
};

export type IntervalFeedItem = BaseFeedItem & {
  readonly feedItemContentType: FeedItemContentType.Interval;
  readonly content: IntervalFeedItemContent;
  // TODO: Enforce `origin` is an `IntervalFeed`.
};

export type FeedItem =
  | ArticleFeedItem
  | VideoFeedItem
  | WebsiteFeedItem
  | TweetFeedItem
  | YouTubeFeedItem
  | XkcdFeedItem
  | IntervalFeedItem;

export enum TriageStatus {
  Untriaged = 'UNTRIAGED',
  Saved = 'SAVED',
  Done = 'DONE',
  Trashed = 'TRASHED',
}
