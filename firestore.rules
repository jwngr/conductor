rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    ///////////////////////
    //  AUTH VALIDATORS  //
    ///////////////////////
    function isAuthenticated() {
      return request.auth != null;
    }

    function isRequestActor(accountId) {
      return isAuthenticated() && request.auth.uid == accountId;
    }

    function isResourceOwner() {
      return isAuthenticated() && request.auth.uid == resource.data.accountId;
    }

    function isNewResourceOwner() {
      return isAuthenticated() && request.auth.uid == request.resource.data.accountId;
    }

    ///////////////////////
    //  ENUM VALIDATORS  //
    ///////////////////////
    function isValidFeedSourceType(maybeFeedSourceType) {
      return maybeFeedSourceType in ['RSS', 'YOUTUBE_CHANNEL', 'INTERVAL', 'PWA', 'EXTENSION', 'POCKET_EXPORT'];
    }

    function isValidDeliveryScheduleType(maybeDeliveryScheduleType) {
      return maybeDeliveryScheduleType in ['IMMEDIATE', 'NEVER', 'DAYS_AND_TIMES_OF_WEEK', 'EVERY_N_HOURS'];
    }

    function isValidThemePreference(maybeThemePreference) {
      return maybeThemePreference in ['SYSTEM', 'LIGHT', 'DARK'];
    }

    function isValidTriageStatus(maybeTriageStatus) {
      return maybeTriageStatus in ['UNTRIAGED', 'SAVED', 'DONE', 'TRASHED'];
    }

    function isValidEnvironment(maybeEnvironment) {
      return maybeEnvironment in ['PWA', 'EXTENSION', 'FIREBASE_FUNCTIONS', 'SCRIPTS'];
    }

    ///////////////////////
    //  TYPE VALIDATORS  //
    ///////////////////////
    function isValidFeedSource(maybeFeedSource) {
      return maybeFeedSource.keys().hasAll(['feedSourceType']) &&
        isValidFeedSourceType(maybeFeedSource.feedSourceType);
    }

    function isValidDeliverySchedule(maybeDeliverySchedule) {
      return maybeDeliverySchedule.keys().hasAll(['scheduleType']) &&
        isValidDeliveryScheduleType(maybeDeliverySchedule.scheduleType);
    }

    function isValidSystemActor(maybeActor) {
      return maybeActor.keys().hasAll(['actorType']) && maybeActor.actorType == 'SYSTEM';
    }

    function isValidAccountActor(maybeActor) {
      return maybeActor.keys().hasAll(['actorType', 'accountId']) &&
        maybeActor.actorType == 'ACCOUNT' &&
        isRequestActor(maybeActor.accountId);
    }

    function isValidActor(maybeActor) {
      return isValidSystemActor(maybeActor) || isValidAccountActor(maybeActor);
    }

    function isValidEventLogItemData(maybeEventLogItemData) {
      return maybeEventLogItemData.keys().hasAll(['eventType']) &&
        isValidEventType(maybeEventLogItemData.eventType);
    }

    //////////////////////
    //  DOC VALIDATORS  //
    //////////////////////
    function isValidAccountsDoc(accountId, isCreate) {
      return request.resource.data.keys().hasAll([
        'accountId',
        'email',
        'createdTime',
        'lastUpdatedTime'
      ]) &&
      request.resource.data.accountId == accountId &&
      request.resource.data.email is string &&
      request.resource.data.createdTime is timestamp &&
      request.resource.data.lastUpdatedTime is timestamp &&
      // Validate readonly fields on update.
      ( 
        isCreate || (
          request.resource.data.accountId == resource.data.accountId &&
          request.resource.data.email == resource.data.email &&
          request.resource.data.createdTime == resource.data.createdTime
        )
      );
    }

    function isValidAccountExperimentsDoc(accountId, isCreate) {
      return request.resource.data.keys().hasAll([
        'accountId',
        'accountVisibility',
        'experimentOverrides',
        'createdTime',
        'lastUpdatedTime'
      ]) &&
      request.resource.data.accountId == accountId &&
      request.resource.data.accountVisibility in ['PUBLIC', 'INTERNAL'] &&
      request.resource.data.experimentOverrides is map &&
      request.resource.data.createdTime is timestamp &&
      request.resource.data.lastUpdatedTime is timestamp &&
      // Validate readonly fields on update.
      ( 
        isCreate || (
          request.resource.data.accountId == resource.data.accountId &&
          request.resource.data.accountVisibility == resource.data.accountVisibility &&
          request.resource.data.createdTime == resource.data.createdTime
        )
      );
    }

    function isValidAccountSettingsDoc(accountId, isCreate) {
      return request.resource.data.keys().hasAll([ 
        'accountId',
        'themePreference',
        'createdTime',
        'lastUpdatedTime',
      ]) &&
      request.resource.data.accountId == accountId &&
      isValidThemePreference(request.resource.data.themePreference) &&
      request.resource.data.createdTime is timestamp &&
      request.resource.data.lastUpdatedTime is timestamp &&
      // Validate readonly fields on update.
      ( 
        isCreate || (
          request.resource.data.accountId == resource.data.accountId &&
          request.resource.data.createdTime == resource.data.createdTime
        )
      );
    }

    function isValidFeedItemDoc(feedItemId, isCreate) {
      return request.resource.data.keys().hasAll([
        'feedItemId',
        'feedItemContentType',
        'content',
        'feedSource',
        'importState',
        'triageStatus',
        'tagIds',
        'createdTime',
        'lastUpdatedTime'
      ]) &&
      request.resource.data.feedItemId == feedItemId &&
      request.resource.data.feedItemContentType in ['ARTICLE', 'VIDEO', 'WEBSITE', 'TWEET', 'XKCD', 'YOUTUBE'] &&
      request.resource.data.content is map &&
      isValidTriageStatus(request.resource.data.triageStatus) &&
      request.resource.data.tagIds is map &&
      request.resource.data.createdTime is timestamp &&
      request.resource.data.lastUpdatedTime is timestamp &&
      // Validate readonly fields on update.
      ( 
        isCreate || (
          request.resource.data.feedItemId == resource.data.feedItemId &&
          request.resource.data.feedItemContentType == resource.data.feedItemContentType &&
          request.resource.data.feedSource.feedSourceType == resource.data.feedSource.feedSourceType &&
          request.resource.data.createdTime == resource.data.createdTime
        )
      );
    }

    function isValidUserFeedSubscriptionDoc(userFeedSubscriptionId, isCreate) {
      return request.resource.data.keys().hasAll([
        'userFeedSubscriptionId',
        'feedSourceType',
        'accountId',
        'isActive',
        'deliverySchedule',
        'createdTime',
        'lastUpdatedTime'
      ]) &&
      request.resource.data.userFeedSubscriptionId == userFeedSubscriptionId &&
      isValidFeedSourceType(request.resource.data.feedSourceType) &&
      request.resource.data.accountId is string &&
      request.resource.data.isActive is bool &&
      isValidDeliverySchedule(request.resource.data.deliverySchedule) &&
      request.resource.data.createdTime is timestamp &&
      request.resource.data.lastUpdatedTime is timestamp &&
      // Validate readonly fields on update.
      ( 
        isCreate || (
          request.resource.data.userFeedSubscriptionId == resource.data.userFeedSubscriptionId &&
          request.resource.data.feedSourceType == resource.data.feedSourceType &&
          request.resource.data.accountId == resource.data.accountId &&
          request.resource.data.createdTime == resource.data.createdTime
        )
      );
    }

    function isValidEventLogItemDoc(eventId, isCreate) {
      return request.resource.data.keys().hasAll([
        'eventId',
        'accountId',
        'actor',
        'environment',
        'data',
        'createdTime',
        'lastUpdatedTime'
      ]) &&
      request.resource.data.eventId == eventId &&
      isValidActor(request.resource.data.actor) &&
      isValidEnvironment(request.resource.data.environment) &&
      isValidEventLogItemData(request.resource.data.data) &&
      request.resource.data.createdTime is timestamp &&
      request.resource.data.lastUpdatedTime is timestamp &&
      // Only allow creation, not updates. Also enforced via an explicit `update` rule.
      isCreate;
    }

    /////////////
    //  RULES  //
    /////////////
    match /accounts/{accountId} {
      // Allow accounts to read their own account data.
      allow read: if isRequestActor(accountId) && isResourceOwner();
      // Allow accounts to manage their own account data.
      allow create: if isRequestActor(accountId) && isNewResourceOwner() && isValidAccountsDoc(accountId, true);
      allow update: if isRequestActor(accountId) && isResourceOwner() && isNewResourceOwner() && isValidAccountsDoc(accountId, false);
      // Only allow deletes via the admin SDK.
      allow delete: if false;
    }

    match /accountExperiments/{accountId} {
      // Allow accounts to read their own experiments.
      allow read: if isRequestActor(accountId) && isResourceOwner();
      // Allow accounts to manage their own experiments.
      allow create: if isRequestActor(accountId) && isNewResourceOwner() && isValidAccountExperimentsDoc(accountId, true);
      allow update: if isRequestActor(accountId) && isResourceOwner() && isNewResourceOwner() && isValidAccountExperimentsDoc(accountId, false);
      // Only allow deletes via the admin SDK.
      allow delete: if false;
    }

    match /accountSettings/{accountId} {
      // Allow accounts to read their own settings.
      allow read: if isRequestActor(accountId) && isResourceOwner();
      // Allow accounts to manage their own settings.
      allow create: if isRequestActor(accountId) && isNewResourceOwner() && isValidAccountSettingsDoc(accountId, true);
      allow update: if isRequestActor(accountId) && isResourceOwner() && isNewResourceOwner() && isValidAccountSettingsDoc(accountId, false);
      // Only allow deletes via the admin SDK.
      allow delete: if false;
    }

    match /feedItems/{feedItemId} {
      // Allow accounts to read their own feed items.
      allow read: if isResourceOwner();
      // Allow accounts to manage their own feed items.
      allow create: if isNewResourceOwner() && isValidFeedItemDoc(feedItemId, true);
      allow update: if isResourceOwner() && isNewResourceOwner() && isValidFeedItemDoc(feedItemId, false);
      // Allow accounts to delete their own feed items.
      allow delete: if isResourceOwner();
    }

    match /userFeedSubscriptions/{userFeedSubscriptionId} {
      // Allow accounts to manage their own feed subscriptions.
      allow read: if isResourceOwner();
      // Allow accounts to manage their own feed subscriptions.
      allow create: if isNewResourceOwner() && isValidUserFeedSubscriptionDoc(userFeedSubscriptionId, true);
      allow update: if isResourceOwner() && isNewResourceOwner() && isValidUserFeedSubscriptionDoc(userFeedSubscriptionId, false);
      // Allow accounts to delete their own feed subscriptions.
      allow delete: if isResourceOwner();
    }

    match /eventLog/{eventId} {
      // Allow accounts to read their own events.
      allow read: if isResourceOwner();
      // Allow accounts to create event log items.
      allow create: if isNewResourceOwner() && isValidEventLogItemDoc(eventId, true);
      // Event log items are only ever written once.
      allow update: if false;
      // Only allow deletes via the admin SDK.
      allow delete: if false;
    }
  }
}
