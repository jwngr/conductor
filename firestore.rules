rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    ////////////////////////
    //  Helper functions  //
    ////////////////////////
    function isAuthenticated() {
      return request.auth != null;
    }

    function isOwner(accountId) {
      return isAuthenticated() && request.auth.uid == accountId;
    }

    function isResourceOwner() {
      return isOwner(resource.data.accountId);
    }

    function isNewResourceOwner() {
      return isOwner(request.resource.data.accountId);
    }

    function isValidFeedSourceType(maybeFeedSourceType) {
      return maybeFeedSourceType in ['RSS', 'YOUTUBE_CHANNEL', 'INTERVAL', 'PWA', 'EXTENSION', 'POCKET_EXPORT'];
    }

    function isValidDeliveryScheduleType(maybeDeliveryScheduleType) {
      return maybeDeliveryScheduleType in ['IMMEDIATE', 'NEVER', 'DAYS_AND_TIMES_OF_WEEK', 'EVERY_N_HOURS'];
    }

    function isValidFeedItemDoc(feedItemId) {
      return request.resource.data.keys().hasAll([
        'feedItemId',
        'feedItemType',
        'feedSource',
        'importState',
        'url',
        'title',
        'outgoingLinks',
        'triageStatus',
        'tagIds',
        'createdTime',
        'lastUpdatedTime'
      ]) &&
      request.resource.data.feedItemId is string &&
      request.resource.data.feedItemId == feedItemId &&
      request.resource.data.feedItemType in ['ARTICLE', 'VIDEO', 'WEBSITE', 'TWEET', 'XKCD', 'YOUTUBE'] &&
      request.resource.data.feedSource.keys().hasAll(['feedSourceType']) &&
      isValidFeedSourceType(request.resource.data.feedSource.feedSourceType) &&
      request.resource.data.url is string &&
      request.resource.data.title is string &&
      request.resource.data.outgoingLinks is list &&
      request.resource.data.triageStatus in ['UNTRIAGED', 'SAVED', 'DONE', 'TRASHED'] &&
      request.resource.data.tagIds is map &&
      request.resource.data.createdTime is timestamp &&
      request.resource.data.lastUpdatedTime is timestamp;
    }

    function isValidUserFeedSubscriptionDoc(userFeedSubscriptionId) {
      return request.resource.data.keys().hasAll([
        'userFeedSubscriptionId',
        'feedSourceType',
        'accountId',
        'isActive',
        'deliverySchedule',
        'createdTime',
        'lastUpdatedTime'
      ]) &&
      request.resource.data.userFeedSubscriptionId is string &&
      request.resource.data.userFeedSubscriptionId == userFeedSubscriptionId &&
      isValidFeedSourceType(request.resource.data.feedSourceType) &&
      request.resource.data.accountId is string &&
      request.resource.data.isActive is bool &&
      request.resource.data.deliverySchedule.keys().hasAll(['scheduleType']) &&
      isValidDeliveryScheduleType(request.resource.data.deliverySchedule.scheduleType) &&
      request.resource.data.createdTime is timestamp &&
      request.resource.data.lastUpdatedTime is timestamp;
    }

    function isValidEventLogItemDoc(eventId) {
      return request.resource.data.keys().hasAll([
        'eventId',
        'eventType',
        'accountId',
        'actor',
        'environment',
        'createdTime',
        'lastUpdatedTime'
      ]) &&
      request.resource.data.eventId is string &&
      request.resource.data.eventId == eventId &&
      request.resource.data.eventType is string &&
      request.resource.data.actor is map &&
      request.resource.data.actor.keys().hasAll(['accountId']) &&
      request.resource.data.actor.accountId == request.auth.uid &&
      request.resource.data.environment is string &&
      request.resource.data.createdTime is timestamp &&
      request.resource.data.lastUpdatedTime is timestamp;
    }

    function isValidAccountExperimentsDoc() {
      return request.resource.data.keys().hasAll([
        'accountId',
        'accountVisibility',
        'experimentOverrides',
      ]) &&
      request.resource.data.accountVisibility is string &&
      request.resource.data.accountVisibility in ['PUBLIC', 'INTERNAL'] &&
      request.resource.data.experimentOverrides is map &&
      request.resource.data.experimentOverrides.keys().hasAll(['experimentId', 'experimentType', 'experimentValue']) &&
      request.resource.data.experimentOverrides.experimentId is string &&
      request.resource.data.experimentOverrides.experimentType is string &&
      request.resource.data.experimentOverrides.experimentType in ['BOOLEAN', 'STRING'];
    }

    /////////////
    //  Rules  //
    /////////////
    match /accounts/{accountId} {
      // Allow accounts to manage their own data.
      // TODO: Some fields should not be user-editable.
      allow read: if isOwner(accountId) && isResourceOwner();
      allow create: if isNewResourceOwner();
      allow update: if isResourceOwner() && isNewResourceOwner();

      // Only allow deletes via the admin SDK.
      allow delete: if false;
    }

    match /accountExperiments/{accountId} {
      allow read: if isOwner(accountId) && isResourceOwner();
      // TODO: Validate the actual schema of the experiment data being written.
      allow create: if isNewResourceOwner() && isValidAccountExperimentsDoc();
      allow update: if isResourceOwner() && isNewResourceOwner() && isValidAccountExperimentsDoc();
      
      // Only allow deletes via the admin SDK.
      allow delete: if false;
    }

    match /feedItems/{feedItemId} {
      // Allow accounts to manage their own feed items.
      // TODO: Some fields should not be user-editable.
      allow read: if isResourceOwner();
      allow create: if isNewResourceOwner() && isValidFeedItemDoc(feedItemId);
      allow update: if isResourceOwner() && isNewResourceOwner();
      allow delete: if isResourceOwner();
    }

    match /userFeedSubscriptions/{userFeedSubscriptionId} {
      // Allow accounts to manage their own feed subscriptions.
      // TODO: Some fields should not be user-editable.
      allow read: if isResourceOwner();
      allow create: if isNewResourceOwner() && isValidUserFeedSubscriptionDoc(userFeedSubscriptionId);
      allow update: if isResourceOwner() && isNewResourceOwner() && isValidUserFeedSubscriptionDoc(userFeedSubscriptionId);
      allow delete: if isResourceOwner();
    }

    match /eventLog/{eventId} {
      // Allow accounts to read their own events.
      allow read: if isResourceOwner();

      // Allow creation and deletion if the current account owns the new document.
      allow create: if isNewResourceOwner() && isValidEventLogItemDoc(eventId);

      // Event log items cannot be updated or deleted, only created.
      allow update, delete: if false;
    }
  }
}
